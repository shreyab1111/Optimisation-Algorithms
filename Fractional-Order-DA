# Shreya


from sklearn.svm import SVC
import numpy as np
import pandas as pd
import random
import math 
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import roc_curve, auc, roc_auc_score
from sklearn.metrics import f1_score
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
import tqdm

###### Calculation of accuracy #####
def calc_acc(y, y_pred):
    # total=len(y)
    # c=0
    # for i in range(0,total):
        # if y[i]==y_pred[i]:
            # c+=1
    # return c/total
    from sklearn.metrics import accuracy_score
    return accuracy_score(y, y_pred)
    

####### Calculation of fitness #########
def fitness(moth_pos, x_train, y_train, x_test, y_test):
    
    x_train_selected_features=pd.DataFrame()
    x_test_selected_features=pd.DataFrame()


    for i in range(len(moth_pos)):
        x_train_selected_features[str(moth_pos[i])] = x_train.iloc[:,int(moth_pos[i])]
        x_test_selected_features[str(moth_pos[i])] = x_test.iloc[:,int(moth_pos[i])]
    
    svclassifier = SVC(kernel='poly', coef0=2.0)
    #svclassifier = RandomForestClassifier()
    svclassifier.fit(x_train_selected_features, y_train)
    y_score = svclassifier.fit(x_train_selected_features, y_train).decision_function(x_test_selected_features)
    #y_score = svclassifier.predict_proba(x_test_selected_features)
    #y_score = y_score[:,1]
    
    y_test=y_test.to_numpy()
    y_pred = svclassifier.predict(x_test_selected_features)

    acc=calc_acc(y_test,y_pred)
    prec=precision_score(y_test, y_pred, average='micro')
    rec=recall_score(y_test, y_pred, average='micro')
    f1=f1_score(y_test, y_pred, average='micro')
    
    #fpr, tpr, thresholds = roc_curve(y_test, y_score)
    
    #auc1=auc(fpr, tpr)
    
    return acc, prec, rec, f1 #, auc1, fpr, tpr

def distance(a,b,dim):
    o = np.zeros(dim)
    for i in range(0,len(a)):
        o[i] = abs(a[i] - b[i])
    return o

def Levy(d):
    beta=3/2
    sigma=(math.gamma(1+beta)*math.sin(math.pi*beta/2)/(math.gamma((1+beta)/2)*beta*2**((beta-1)/2)))**(1/beta)
    u=np.random.randn(d)*sigma
    v=np.random.randn(d)
    step=u/abs(v)**(1/beta)
    o=0.01*step
    return o   

def summersault_factor(X,food_pos,x_train, y_train, x_test, y_test):
        '''
        X.shape= {mem,1,dim}
        '''
        #print(X.shape)
        from math import atan
        best_acc= 0
        local_best=0
        for mem in range(X.shape[0]):
            acc, precision1, sensitivity1, F1_1= fitness(X[mem],x_train, y_train, x_test, y_test) 
            if acc>best_acc:
                best_acc=acc
                local_best= X[mem]
                
        distance2food_best=distance(local_best,food_pos,X.shape[1])
        #print(distance2food_best.shape)
        atan_norm= list(map(atan,distance2food_best))
        
        atan_norm = np.array(atan_norm)
        
        return 2*atan_norm
        
        
                
            

def DA(x_train, y_train, x_test, y_test, Max_iteration, m, orig, mem,gamma,f_loss):
    
    
    
    ######################################################
    # X_train= training set
    # y_train= training true labels
    # X_test=  testing set
    # y_test=  testing set true labels
    # Max_iteration= Maximum iterations to perform
    # m= maximum achieved accuracy
    # orig= original feature vector size
    # mem= Number of last iterations in memory to be considered for updating the feature vector 
    # gamma= fractional order coefficient for position update of agents (0.2--0.8)
    # f_loss= dimensionality loss in feature space (0.30--1.00)
    #
    #
    #######################################################
    length=int(len(x_train.iloc[0]))
    length=length-int(f_loss*length) 
    
    dim=length          # 128
    
    ub=int(len(x_train.iloc[0]))-1         #127 th feature is upperbound
    lb=0                                   # 0  th feature is lowerbound
    
    
    r=(ub-lb)/10    # radius
    Delta_max=(ub-lb)/8.5
    
    Food_fitness=m      #highest achieved accuracy
    Food_pos=orig       #number of features originally
    
    Enemy_fitness=math.inf            # accuracy is infinity

    Enemy_pos=np.zeros(dim)           # a zero vector of original dimension
    
    fitness_of_X = np.zeros(20)       # accuracy achieved by each dragonfly Xi
    All_fitness = np.zeros(20)
    
    X = np.zeros(shape=(mem,20,dim))      # initializing a population of 20 dragonflies of original dimension
    DeltaX = np.zeros(shape=(20,dim)) # Step vector for position update  
    
    
    # providing random positions to the each dragonfly in the population
    for j in range(mem):
        for i in range(0,20):
            X[j,i]=np.random.randint(len(x_train.iloc[0]), size=length)
            # for j in range(0,dim):
            #     X[i][j]=int(lb + random.uniform(0,1)*(ub-lb))
            
            X[j,i] = np.sort(X[j,i])
    
    
    # SELECTING TWO RANDOM AGENTS
    i1=random.randint(0,19)
    i2=random.randint(0,19)
    
    while i2==i1:
        i2=random.randint(0,19)
        
    #MAX DISTANCE BETWEEN THESE AGENTS
    ub_del=max(distance(X[mem-1,i1],X[mem-1,i2],dim))
    
    
    # for assigning velocity to each dragonfly
    
    for i in range(0,20):
        for j in range(0,dim):
            DeltaX[i][j]=int(lb + random.uniform(0,1)*(ub_del-lb))

    for itr in range(1,Max_iteration+1):
        
        r=(ub_del-lb)/4+((ub_del-lb)*(itr/Max_iteration)*2)   # UPDATING RADIUS
        w=0.9-itr*((0.9-0.4)/Max_iteration)                   # INERTIA WEIGHT
        my_c=0.1-itr*((0.1-0)/(Max_iteration/2))              # MY COEFFIECIENT NON NEGATIVE ENSURED why??
        
        if my_c<0:
            my_c=0
        
        s=2*random.random()*my_c              # random() --> (0,1)
        a=2*random.random()*my_c
        c=2*random.random()*my_c
        f=2*random.random()*my_c
        e=my_c
        
        Food_fitness = 0
        Food_precision=0
        Food_sensitivity=0
        Food_F1=0
                #Food_AUC=AUC
        Food_pos=0
        
        # updating each dragonfly in population
        for i in range(0,20):
            fitness_of_X[i], precision, sensitivity, F1 = fitness(X[itr%mem,i],x_train, y_train, x_test, y_test)
            All_fitness[i] = fitness_of_X[i]
            
            if fitness_of_X[i] > Food_fitness:
                Food_fitness = fitness_of_X[i]
                Food_precision=precision
                Food_sensitivity=sensitivity
                Food_F1=F1
                #Food_AUC=AUC
                Food_pos=X[itr%mem,i]         # shape(1,128)
                #Food_fpr=fpr
                #Food_tpr=tpr
            
        
            # updating enemy fitness that should be minimum
            if fitness_of_X[i] < Enemy_fitness:
                   # if all features are included then it is enemy
                if all((X[itr%mem,i] <= ub)) and all((X[itr%mem,i] >= lb)):
                    Enemy_fitness = fitness_of_X[i]
                    Enemy_pos = X[itr%mem][i]
        
        print(Food_fitness)
        print(len(np.unique(Food_pos)))
        for i in tqdm.tqdm(range(0,20)):
            index=0
            neighbours_no=0
            
            Neighbours_X = np.zeros(shape=(20,dim))
            Neighbours_DeltaX = np.zeros(shape=(20,dim))
            
            # for each dragonfly check all others, 
            for j in range(0,20):
                Dist2Enemy = distance(X[itr%mem,i],X[itr%mem,j],dim)
                if (all(Dist2Enemy<=r) and all(Dist2Enemy!=0)):
                    index=index+1
                    neighbours_no=neighbours_no+1
                    Neighbours_DeltaX[index]=DeltaX[j]
                    Neighbours_X[index]=X[itr%mem,j]
                    
                    
            # the above nested loop is filtering out the number of neighbours to eachy dragonfly
            S=np.zeros(dim)           # separation from neighbors
            if neighbours_no>1:
                for k in range(0,neighbours_no):
                    S=S+(Neighbours_X[k]-X[itr%mem,i])
                S=-S
            else:
                S=np.zeros(dim)
                
            
            
            if neighbours_no>1:                                       
                A=(sum(Neighbours_DeltaX))/neighbours_no             # Alignment
            else:
                A = DeltaX[i]
            
            
            
            if neighbours_no>1:
                C_temp=(sum(Neighbours_X))/neighbours_no             # cohension towards centre of gravity
            else:
                C_temp=X[itr%mem,i]
        
            C=C_temp-X[itr%mem,i]
            
            
            
            Dist2Food=distance(X[itr%mem,i],Food_pos,dim)
                               
            if all(Dist2Food<=r):
                F=Food_pos-X[itr%mem,i]
            else:
                F=np.zeros(dim)
            
            
            
            Dist2Enemy=distance(X[itr%mem,i],Enemy_pos,dim)
                               
            if all(Dist2Enemy<=r):
                Enemy=Enemy_pos-X[itr%mem,i]
            else:
                Enemy=np.zeros(dim)
            
            
            #bringing back to search space
            for tt in range(0,dim):
                if X[itr%mem][i][tt]>ub:
                    X[itr%mem][i][tt]=ub
                    DeltaX[i][tt]=random.uniform(0,1)*(50-lb)
                    
                if X[itr%mem][i][tt]<lb:
                    X[itr%mem][i][tt]=lb
                    DeltaX[i][tt]=random.uniform(0,1)*(50-lb)
            
            temp=np.zeros(dim)
            Delta_temp=np.zeros(dim)
            
            if any(Dist2Food>r):  #exploration
                if neighbours_no>1:
                    for j in range(0,dim):                                               
                        Delta_temp[j] = int(w*DeltaX[i][j] + random.random()*A[j] + random.random()*C[j] + random.random()*S[j])
                        if Delta_temp[j]>Delta_max:
                            Delta_temp[j]=Delta_max
                        if Delta_temp[j]<-Delta_max:             # how can velocity be negative
                            Delta_temp[j]=-Delta_max
                        temp[j]=X[itr%mem][i][j]+(Delta_temp[j])      #updating features index
                else:
                    temp=(X[itr%mem][i] + (Levy(dim))*X[itr%mem][i]).astype(int)
                    Delta_temp=np.zeros(dim)              # velocity vector zero
            
            
            else: # exploitation
                for j in range(0,dim):
                    Delta_temp[j] = int((a*A[j] + c*C[j] + s*S[j] + f*F[j] + e*Enemy[j]) + w*DeltaX[i][j])
                    if Delta_temp[j]>Delta_max:
                        Delta_temp[j]=Delta_max
                    if Delta_temp[j]<-Delta_max:
                        Delta_temp[j]=-Delta_max
                    #temp[j]=X[i][j]+Delta_temp[j]
                    from math import factorial as fact
                    
                    
                    #temp[j]=X[i][j]+(Delta_temp[j])      #updating features index
                    temp_update= 0
                    for stg in range(1,mem+1):
                        temp_update=0
                        for valx in range(1,stg+1):
                            temp_update= temp_update+(gamma*(1/fact(valx))*(valx-gamma)*X[(Max_iteration-stg)%mem][i][j])
                        
                    # update term add here
                    
                    end_term= summersault_factor(X[:,i,:],Food_pos,x_train, y_train, x_test, y_test )
                    r3= random.random()*my_c 
                    r2=random.random()*my_c 
                    
                    diff2best= distance(r2*Food_pos,r3*X[itr%mem][i],dim)
                    
                    end_term*=diff2best
                    
                    temp[j]= temp_update+ Delta_temp[j]+ end_term[j]
               
            #updating boundaries
            for j in range(0,dim):
                if temp[j]<lb: # Bringinging back to search space
                        temp[j]=lb
                    
                if temp[j]>ub: # Bringinging back to search space
                    temp[j]=ub
            acc, precision1, sensitivity1, F1_1= fitness(temp,x_train, y_train, x_test, y_test)       
            #if acc > fitness_of_X[i]:
            #if(fitness(temp,x_train, y_train, x_test, y_test)[0]) > Food_fitness:
            if(acc) > Food_fitness:
            
                X[itr%mem][i]=temp
                DeltaX[i]=Delta_temp
            
            
                    
        Best_score=Food_fitness
        Best_pos=Food_pos
        print("Our position update\n")
        print("Iteration = " + str(itr))
        
        
        for agx in range(20):
            print("Length of agent ",agx+1,"= ",len(np.unique(X[itr%mem][agx])))
    '''
    plt.figure()
    lw = 2
    plt.plot(Food_fpr, Food_tpr, color='darkorange',
             lw=lw, label='ROC curve (area = %0.2f)' % Food_AUC)
    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver operating characteristic')
    plt.legend(loc="lower right")
    plt.show()
    '''
    return Best_pos, Best_score, Food_precision, Food_sensitivity, Food_F1 #, Food_AUC    
